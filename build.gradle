plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	testImplementation 'org.springframework.security:spring-security-test:6.2.1'

	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.1.0'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	implementation 'p6spy:p6spy:3.7.0'

	implementation 'org.springframework:spring-aop:6.1.0'
	implementation 'org.springframework.data:spring-data-envers:3.1.2'

	implementation 'io.jsonwebtoken:jjwt:0.12.3'
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation ('org.springframework.boot:spring-boot-starter-web')

	implementation 'org.springframework.boot:spring-boot-starter-tomcat:3.1.2'

	implementation 'org.springframework.boot:spring-boot-starter-validation:3.1.4'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	implementation 'org.springframework.boot:spring-boot-maven-plugin:3.1.2'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'


	testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

}

tasks.named('test') {
	useJUnitPlatform()
}



//tasks.register('uberJar', Jar) {
//	archiveClassifier = 'uber'
//
//	from sourceSets.main.output
//
//	dependsOn configurations.runtimeClasspath
//	from {
//		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//	}
//}


bootJar{
	duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
}

//bootRepackage {
//	mainClass =  'com.example.security2pro.Security2proApplication'
//}


//jar {
//	manifest {
//		attributes(
//				'Main-Class': 'com.example.security2pro.Security2proApplication',
//		)
//		exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
//	}
//
////	from {
////		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
////	}
//
//	from {
//		configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
//	}
//}
